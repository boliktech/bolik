#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_setup_logs_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "setup_logs",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| setup_logs(task_callback.stream_sink()),
    )
}
fn wire_setup_impl(
    port_: MessagePort,
    app_support_dir: impl Wire2Api<String> + UnwindSafe,
    files_dir: impl Wire2Api<String> + UnwindSafe,
    device_name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "setup",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_app_support_dir = app_support_dir.wire2api();
            let api_files_dir = files_dir.wire2api();
            let api_device_name = device_name.wire2api();
            move |task_callback| {
                setup(
                    task_callback.stream_sink(),
                    api_app_support_dir,
                    api_files_dir,
                    api_device_name,
                )
            }
        },
    )
}
fn wire_timeline_days_impl(port_: MessagePort, label_ids: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "timeline_days",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_label_ids = label_ids.wire2api();
            move |task_callback| timeline_days(api_label_ids)
        },
    )
}
fn wire_timeline_by_day_impl(
    port_: MessagePort,
    day: impl Wire2Api<String> + UnwindSafe,
    label_ids: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "timeline_by_day",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_day = day.wire2api();
            let api_label_ids = label_ids.wire2api();
            move |task_callback| timeline_by_day(api_day, api_label_ids)
        },
    )
}
fn wire_get_device_share_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_device_share",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_device_share(),
    )
}
fn wire_link_device_impl(port_: MessagePort, share: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "link_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_share = share.wire2api();
            move |task_callback| link_device(api_share)
        },
    )
}
fn wire_remove_device_impl(port_: MessagePort, remove_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "remove_device",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_remove_id = remove_id.wire2api();
            move |task_callback| remove_device(api_remove_id)
        },
    )
}
fn wire_sync_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sync",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(sync()),
    )
}
fn wire_create_account_impl(port_: MessagePort, name: impl Wire2Api<Option<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            move |task_callback| create_account(api_name)
        },
    )
}
fn wire_save_file_impl(
    port_: MessagePort,
    card_id: impl Wire2Api<String> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "save_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            let api_path = path.wire2api();
            move |task_callback| save_file(api_card_id, api_path)
        },
    )
}
fn wire_edit_card_impl(
    port_: MessagePort,
    card_id: impl Wire2Api<String> + UnwindSafe,
    changes: impl Wire2Api<Vec<CardChange>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "edit_card",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            let api_changes = changes.wire2api();
            move |task_callback| edit_card(api_card_id, api_changes)
        },
    )
}
fn wire_close_card_impl(port_: MessagePort, card_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "close_card",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            move |task_callback| close_card(api_card_id)
        },
    )
}
fn wire_get_card_impl(port_: MessagePort, card_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_card",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            move |task_callback| get_card(api_card_id)
        },
    )
}
fn wire_create_card_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_card",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| create_card(),
    )
}
fn wire_move_card_to_bin_impl(port_: MessagePort, card_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "move_card_to_bin",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            move |task_callback| move_card_to_bin(api_card_id)
        },
    )
}
fn wire_restore_from_bin_impl(port_: MessagePort, card_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "restore_from_bin",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            move |task_callback| restore_from_bin(api_card_id)
        },
    )
}
fn wire_empty_bin_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "empty_bin",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| empty_bin(),
    )
}
fn wire_move_card_to_bin_all_impl(port_: MessagePort, card_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "move_card_to_bin_all",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            move |task_callback| move_card_to_bin_all(api_card_id)
        },
    )
}
fn wire_add_card_label_impl(
    port_: MessagePort,
    card_id: impl Wire2Api<String> + UnwindSafe,
    label_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_card_label",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            let api_label_id = label_id.wire2api();
            move |task_callback| add_card_label(api_card_id, api_label_id)
        },
    )
}
fn wire_remove_card_label_impl(
    port_: MessagePort,
    card_id: impl Wire2Api<String> + UnwindSafe,
    label_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "remove_card_label",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            let api_label_id = label_id.wire2api();
            move |task_callback| remove_card_label(api_card_id, api_label_id)
        },
    )
}
fn wire_get_file_path_impl(port_: MessagePort, blob_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_file_path",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob_id = blob_id.wire2api();
            move |task_callback| get_file_path(api_blob_id)
        },
    )
}
fn wire_download_file_impl(
    port_: MessagePort,
    card_id: impl Wire2Api<String> + UnwindSafe,
    blob_id: impl Wire2Api<String> + UnwindSafe,
    device_id: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "download_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            let api_blob_id = blob_id.wire2api();
            let api_device_id = device_id.wire2api();
            move |task_callback| download_file(api_card_id, api_blob_id, api_device_id)
        },
    )
}
fn wire_get_account_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_account(),
    )
}
fn wire_account_group_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "account_group",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| account_group(),
    )
}
fn wire_edit_name_impl(port_: MessagePort, name: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "edit_name",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            move |task_callback| edit_name(api_name)
        },
    )
}
fn wire_add_contact_impl(port_: MessagePort, contact: impl Wire2Api<AccContact> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "add_contact",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_contact = contact.wire2api();
            move |task_callback| add_contact(api_contact)
        },
    )
}
fn wire_edit_contact_name_impl(
    port_: MessagePort,
    account_id: impl Wire2Api<String> + UnwindSafe,
    name: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "edit_contact_name",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_account_id = account_id.wire2api();
            let api_name = name.wire2api();
            move |task_callback| edit_contact_name(api_account_id, api_name)
        },
    )
}
fn wire_create_acc_label_impl(port_: MessagePort, name: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_acc_label",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_name = name.wire2api();
            move |task_callback| create_acc_label(api_name)
        },
    )
}
fn wire_delete_acc_label_impl(port_: MessagePort, label_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "delete_acc_label",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_label_id = label_id.wire2api();
            move |task_callback| delete_acc_label(api_label_id)
        },
    )
}
fn wire_edit_collaborators_impl(
    port_: MessagePort,
    card_id: impl Wire2Api<String> + UnwindSafe,
    changes: impl Wire2Api<Vec<CollaboratorChange>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "edit_collaborators",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_card_id = card_id.wire2api();
            let api_changes = changes.wire2api();
            move |task_callback| edit_collaborators(api_card_id, api_changes)
        },
    )
}
fn wire_export_data_impl(port_: MessagePort, out_dir: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "export_data",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_out_dir = out_dir.wire2api();
            move |task_callback| export_data(api_out_dir)
        },
    )
}
fn wire_import_data_impl(port_: MessagePort, in_dir: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "import_data",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_in_dir = in_dir.wire2api();
            move |task_callback| Ok(mirror_ImportResult(import_data(api_in_dir)?))
        },
    )
}
fn wire_get_current_device_id_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_current_device_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || get_current_device_id(),
    )
}
fn wire_get_deleted_label_id_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_deleted_label_id",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(get_deleted_label_id()),
    )
}
fn wire_scan_qr_code_impl(
    port_: MessagePort,
    width: impl Wire2Api<u32> + UnwindSafe,
    height: impl Wire2Api<u32> + UnwindSafe,
    format: impl Wire2Api<PixelFormat> + UnwindSafe,
    buf: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "scan_qr_code",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_width = width.wire2api();
            let api_height = height.wire2api();
            let api_format = format.wire2api();
            let api_buf = buf.wire2api();
            move |task_callback| scan_qr_code(api_width, api_height, api_format, api_buf)
        },
    )
}
fn wire_list_profiles_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_profiles",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| list_profiles(),
    )
}
fn wire_accept_notification_impl(port_: MessagePort, id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "accept_notification",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| accept_notification(api_id)
        },
    )
}
fn wire_ignore_notification_impl(port_: MessagePort, id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "ignore_notification",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| ignore_notification(api_id)
        },
    )
}
fn wire_list_notification_ids_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_notification_ids",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| list_notification_ids(),
    )
}
fn wire_logout_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "logout",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(logout()),
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_AccContact(AccContact);

#[derive(Clone)]
struct mirror_AccDevice(AccDevice);

#[derive(Clone)]
struct mirror_AccLabel(AccLabel);

#[derive(Clone)]
struct mirror_AclRights(AclRights);

#[derive(Clone)]
struct mirror_CardLabel(CardLabel);

#[derive(Clone)]
struct mirror_CardTextAttrs(CardTextAttrs);

#[derive(Clone)]
struct mirror_ImportResult(ImportResult);

// Section: static checks

const _: fn() = || {
    {
        let AccContact = None::<AccContact>.unwrap();
        let _: String = AccContact.account_id;
        let _: String = AccContact.name;
    }
    {
        let AccDevice = None::<AccDevice>.unwrap();
        let _: String = AccDevice.id;
        let _: String = AccDevice.name;
        let _: chrono::DateTime<chrono::Utc> = AccDevice.added_at;
    }
    {
        let AccLabel = None::<AccLabel>.unwrap();
        let _: String = AccLabel.id;
        let _: String = AccLabel.name;
    }
    match None::<AclRights>.unwrap() {
        AclRights::Read => {}
        AclRights::Write => {}
        AclRights::Admin => {}
    }
    {
        let CardLabel = None::<CardLabel>.unwrap();
        let _: String = CardLabel.id;
        let _: chrono::DateTime<chrono::Utc> = CardLabel.added_at;
    }
    {
        let CardTextAttrs = None::<CardTextAttrs>.unwrap();
        let _: Option<bool> = CardTextAttrs.bold;
        let _: Option<bool> = CardTextAttrs.italic;
        let _: Option<bool> = CardTextAttrs.underline;
        let _: Option<bool> = CardTextAttrs.strikethrough;
        let _: Option<String> = CardTextAttrs.link;
        let _: Option<bool> = CardTextAttrs.checked;
        let _: Option<u8> = CardTextAttrs.heading;
        let _: Option<String> = CardTextAttrs.block;
    }
    {
        let ImportResult = None::<ImportResult>.unwrap();
        let _: u32 = ImportResult.imported;
        let _: Vec<String> = ImportResult.duplicates;
        let _: Vec<String> = ImportResult.failed;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<AclRights> for i32 {
    fn wire2api(self) -> AclRights {
        match self {
            0 => AclRights::Read,
            1 => AclRights::Write,
            2 => AclRights::Admin,
            _ => unreachable!("Invalid variant for AclRights: {}", self),
        }
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<PixelFormat> for i32 {
    fn wire2api(self) -> PixelFormat {
        match self {
            0 => PixelFormat::BGRA8888,
            1 => PixelFormat::JPEG,
            _ => unreachable!("Invalid variant for PixelFormat: {}", self),
        }
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_AccContact {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.account_id.into_dart(), self.0.name.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_AccContact {}

impl support::IntoDart for mirror_AccDevice {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.id.into_dart(),
            self.0.name.into_dart(),
            self.0.added_at.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_AccDevice {}

impl support::IntoDart for mirror_AccLabel {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.id.into_dart(), self.0.name.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_AccLabel {}

impl support::IntoDart for AccView {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.created_at_sec.into_dart(),
            self.name.into_dart(),
            self.contacts
                .into_iter()
                .map(|v| mirror_AccContact(v))
                .collect::<Vec<_>>()
                .into_dart(),
            self.labels
                .into_iter()
                .map(|v| mirror_AccLabel(v))
                .collect::<Vec<_>>()
                .into_dart(),
            self.devices
                .into_iter()
                .map(|v| mirror_AccDevice(v))
                .collect::<Vec<_>>()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AccView {}

impl support::IntoDart for AclDoc {
    fn into_dart(self) -> support::DartAbi {
        vec![self.accounts.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AclDoc {}

impl support::IntoDart for AclEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.account_id.into_dart(),
            mirror_AclRights(self.rights).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AclEntry {}

impl support::IntoDart for mirror_AclRights {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            AclRights::Read => 0,
            AclRights::Write => 1,
            AclRights::Admin => 2,
        }
        .into_dart()
    }
}

impl support::IntoDart for CardBlock {
    fn into_dart(self) -> support::DartAbi {
        vec![self.position.into_dart(), (*self.view).into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CardBlock {}

impl support::IntoDart for CardFile {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.blob_id.into_dart(),
            self.device_id.into_dart(),
            self.checksum.into_dart(),
            self.size_bytes.into_dart(),
            self.name.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CardFile {}

impl support::IntoDart for mirror_CardLabel {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.id.into_dart(), self.0.added_at.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_CardLabel {}

impl support::IntoDart for CardText {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.value.into_dart(),
            self.attrs.map(|v| mirror_CardTextAttrs(v)).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CardText {}

impl support::IntoDart for mirror_CardTextAttrs {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.bold.into_dart(),
            self.0.italic.into_dart(),
            self.0.underline.into_dart(),
            self.0.strikethrough.into_dart(),
            self.0.link.into_dart(),
            self.0.checked.into_dart(),
            self.0.heading.into_dart(),
            self.0.block.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_CardTextAttrs {}

impl support::IntoDart for CardView {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.created_at_sec.into_dart(),
            self.edited_at_sec.into_dart(),
            self.acl.into_dart(),
            self.blocks.into_dart(),
            self.labels
                .into_iter()
                .map(|v| mirror_CardLabel(v))
                .collect::<Vec<_>>()
                .into_dart(),
            self.thumbnail.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CardView {}

impl support::IntoDart for ContentView {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Text(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::File(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ContentView {}
impl support::IntoDart for CreateAccLabelResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.view.into_dart(),
            mirror_AccLabel(self.label).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CreateAccLabelResult {}

impl support::IntoDart for DeviceAddedEvent {
    fn into_dart(self) -> support::DartAbi {
        vec![self.device_name.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DeviceAddedEvent {}

impl support::IntoDart for DocUpdatedEvent {
    fn into_dart(self) -> support::DartAbi {
        vec![self.doc_id.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DocUpdatedEvent {}

impl support::IntoDart for DownloadResult {
    fn into_dart(self) -> support::DartAbi {
        vec![self.path.into_dart(), self.download_started.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DownloadResult {}

impl support::IntoDart for FileThumbnail {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.mime_type.into_dart(),
            self.width.into_dart(),
            self.height.into_dart(),
            self.data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FileThumbnail {}

impl support::IntoDart for mirror_ImportResult {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.imported.into_dart(),
            self.0.duplicates.into_dart(),
            self.0.failed.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ImportResult {}

impl support::IntoDart for OutputEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Synced => vec![0.into_dart()],
            Self::SyncFailed => vec![1.into_dart()],
            Self::TimelineUpdated => vec![2.into_dart()],
            Self::PreAccount => vec![3.into_dart()],
            Self::PostAccount(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::DeviceAdded(field0) => vec![5.into_dart(), field0.into_dart()],
            Self::DocUpdated(field0) => vec![6.into_dart(), field0.into_dart()],
            Self::DownloadCompleted { blob_id, path } => {
                vec![7.into_dart(), blob_id.into_dart(), path.into_dart()]
            }
            Self::DownloadFailed { blob_id } => vec![8.into_dart(), blob_id.into_dart()],
            Self::AccUpdated(field0) => vec![9.into_dart(), field0.into_dart()],
            Self::Notification { id } => vec![10.into_dart(), id.into_dart()],
            Self::NotificationsUpdated => vec![11.into_dart()],
            Self::LogOut => vec![12.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OutputEvent {}
impl support::IntoDart for PostAccountPhase {
    fn into_dart(self) -> support::DartAbi {
        vec![self.acc_view.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PostAccountPhase {}

impl support::IntoDart for ProfileView {
    fn into_dart(self) -> support::DartAbi {
        vec![self.account_id.into_dart(), self.name.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ProfileView {}

impl support::IntoDart for SecretGroupStatus {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.authentication_secret.into_dart(),
            self.devices.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SecretGroupStatus {}

impl support::IntoDart for TimelineDay {
    fn into_dart(self) -> support::DartAbi {
        vec![self.day.into_dart(), self.cards.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TimelineDay {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
