// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class Native {
  Stream<String> setupLogs({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetupLogsConstMeta;

  /// Initialize native code and subscribe to the events that native module dispatches.
  Stream<OutputEvent> setup(
      {required String appSupportDir,
      required String filesDir,
      required String deviceName,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetupConstMeta;

  Future<List<String>> timelineDays(
      {required List<String> labelIds, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTimelineDaysConstMeta;

  Future<TimelineDay> timelineByDay(
      {required String day, required List<String> labelIds, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTimelineByDayConstMeta;

  Future<String> getDeviceShare({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDeviceShareConstMeta;

  Future<String> linkDevice({required String share, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLinkDeviceConstMeta;

  Future<AccView> removeDevice({required String removeId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveDeviceConstMeta;

  Future<void> sync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncConstMeta;

  Future<AccView> createAccount({String? name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateAccountConstMeta;

  Future<CardFile> saveFile(
      {required String cardId, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSaveFileConstMeta;

  Future<CardView> editCard(
      {required String cardId,
      required List<CardChange> changes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEditCardConstMeta;

  Future<void> closeCard({required String cardId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseCardConstMeta;

  Future<CardView> getCard({required String cardId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCardConstMeta;

  Future<CardView> createCard({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateCardConstMeta;

  Future<void> moveCardToBin({required String cardId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMoveCardToBinConstMeta;

  Future<CardView> restoreFromBin({required String cardId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRestoreFromBinConstMeta;

  Future<void> emptyBin({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEmptyBinConstMeta;

  Future<void> moveCardToBinAll({required String cardId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMoveCardToBinAllConstMeta;

  Future<CardView> addCardLabel(
      {required String cardId, required String labelId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddCardLabelConstMeta;

  Future<CardView> removeCardLabel(
      {required String cardId, required String labelId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRemoveCardLabelConstMeta;

  Future<String?> getFilePath({required String blobId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFilePathConstMeta;

  Future<DownloadResult> downloadFile(
      {required String cardId,
      required String blobId,
      required String deviceId,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDownloadFileConstMeta;

  Future<AccView?> getAccount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAccountConstMeta;

  Future<SecretGroupStatus> accountGroup({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAccountGroupConstMeta;

  Future<AccView> editName({required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEditNameConstMeta;

  Future<AccView> addContact({required AccContact contact, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddContactConstMeta;

  Future<AccView> editContactName(
      {required String accountId, required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEditContactNameConstMeta;

  Future<CreateAccLabelResult> createAccLabel(
      {required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateAccLabelConstMeta;

  Future<AccView> deleteAccLabel({required String labelId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeleteAccLabelConstMeta;

  Future<CardView> editCollaborators(
      {required String cardId,
      required List<CollaboratorChange> changes,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEditCollaboratorsConstMeta;

  Future<void> exportData({required String outDir, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExportDataConstMeta;

  Future<ImportResult> importData({required String inDir, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kImportDataConstMeta;

  String getCurrentDeviceId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetCurrentDeviceIdConstMeta;

  String getDeletedLabelId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDeletedLabelIdConstMeta;

  Future<String?> scanQrCode(
      {required int width,
      required int height,
      required PixelFormat format,
      required Uint8List buf,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScanQrCodeConstMeta;

  Future<List<ProfileView>> listProfiles({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListProfilesConstMeta;

  Future<void> acceptNotification({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAcceptNotificationConstMeta;

  Future<void> ignoreNotification({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIgnoreNotificationConstMeta;

  Future<List<String>> listNotificationIds({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListNotificationIdsConstMeta;

  /// Log out from the account. You must re-initialize SDK after calling this function.
  Future<void> logout({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLogoutConstMeta;
}

class AccContact {
  final String accountId;
  final String name;
  AccContact({
    required this.accountId,
    required this.name,
  });
}

class AccDevice {
  final String id;
  final String name;
  final DateTime addedAt;
  AccDevice({
    required this.id,
    required this.name,
    required this.addedAt,
  });
}

class AccLabel {
  final String id;
  final String name;
  AccLabel({
    required this.id,
    required this.name,
  });
}

class AccView {
  final String id;
  final int createdAtSec;
  final String name;
  final List<AccContact> contacts;
  final List<AccLabel> labels;
  final List<AccDevice> devices;
  AccView({
    required this.id,
    required this.createdAtSec,
    required this.name,
    required this.contacts,
    required this.labels,
    required this.devices,
  });
}

class AclDoc {
  final List<AclEntry> accounts;
  AclDoc({
    required this.accounts,
  });
}

class AclEntry {
  final String accountId;
  final AclRights rights;
  AclEntry({
    required this.accountId,
    required this.rights,
  });
}

enum AclRights {
  Read,
  Write,
  Admin,
}

class CardBlock {
  final int position;
  final ContentView view;
  CardBlock({
    required this.position,
    required this.view,
  });
}

@freezed
class CardChange with _$CardChange {
  const factory CardChange.insert(
    CardBlock field0,
  ) = CardChange_Insert;
  const factory CardChange.remove({
    required int position,
    required int len,
  }) = CardChange_Remove;
  const factory CardChange.format({
    required int position,
    required int len,
    required CardTextAttrs attributes,
  }) = CardChange_Format;
}

class CardFile {
  final String blobId;
  final String deviceId;
  final String checksum;
  final int sizeBytes;
  final String? name;
  CardFile({
    required this.blobId,
    required this.deviceId,
    required this.checksum,
    required this.sizeBytes,
    this.name,
  });
}

class CardLabel {
  final String id;
  final DateTime addedAt;
  CardLabel({
    required this.id,
    required this.addedAt,
  });
}

class CardText {
  final String value;
  final CardTextAttrs? attrs;
  CardText({
    required this.value,
    this.attrs,
  });
}

class CardTextAttrs {
  final bool? bold;
  final bool? italic;
  final bool? underline;
  final bool? strikethrough;
  final String? link;
  final bool? checked;
  final int? heading;
  final String? block;
  CardTextAttrs({
    this.bold,
    this.italic,
    this.underline,
    this.strikethrough,
    this.link,
    this.checked,
    this.heading,
    this.block,
  });
}

class CardView {
  final String id;
  final int createdAtSec;
  final int editedAtSec;
  final AclDoc acl;
  final List<CardBlock> blocks;
  final List<CardLabel> labels;
  final FileThumbnail? thumbnail;
  CardView({
    required this.id,
    required this.createdAtSec,
    required this.editedAtSec,
    required this.acl,
    required this.blocks,
    required this.labels,
    this.thumbnail,
  });
}

class CollaboratorChange {
  final String accountId;
  final AclRights rights;
  final bool removed;
  CollaboratorChange({
    required this.accountId,
    required this.rights,
    required this.removed,
  });
}

@freezed
class ContentView with _$ContentView {
  const factory ContentView.text(
    CardText field0,
  ) = ContentView_Text;
  const factory ContentView.file(
    CardFile field0,
  ) = ContentView_File;
}

class CreateAccLabelResult {
  final AccView view;
  final AccLabel label;
  CreateAccLabelResult({
    required this.view,
    required this.label,
  });
}

class DeviceAddedEvent {
  final String deviceName;
  DeviceAddedEvent({
    required this.deviceName,
  });
}

class DocUpdatedEvent {
  final String docId;
  DocUpdatedEvent({
    required this.docId,
  });
}

class DownloadResult {
  final String? path;
  final bool downloadStarted;
  DownloadResult({
    this.path,
    required this.downloadStarted,
  });
}

class FileThumbnail {
  final String mimeType;
  final int width;
  final int height;
  final Uint8List data;
  FileThumbnail({
    required this.mimeType,
    required this.width,
    required this.height,
    required this.data,
  });
}

class ImportResult {
  final int imported;
  final List<String> duplicates;
  final List<String> failed;
  ImportResult({
    required this.imported,
    required this.duplicates,
    required this.failed,
  });
}

@freezed
class OutputEvent with _$OutputEvent {
  const factory OutputEvent.synced() = OutputEvent_Synced;
  const factory OutputEvent.syncFailed() = OutputEvent_SyncFailed;
  const factory OutputEvent.timelineUpdated() = OutputEvent_TimelineUpdated;
  const factory OutputEvent.preAccount() = OutputEvent_PreAccount;
  const factory OutputEvent.postAccount(
    PostAccountPhase field0,
  ) = OutputEvent_PostAccount;
  const factory OutputEvent.deviceAdded(
    DeviceAddedEvent field0,
  ) = OutputEvent_DeviceAdded;
  const factory OutputEvent.docUpdated(
    DocUpdatedEvent field0,
  ) = OutputEvent_DocUpdated;
  const factory OutputEvent.downloadCompleted({
    required String blobId,
    required String path,
  }) = OutputEvent_DownloadCompleted;
  const factory OutputEvent.downloadFailed({
    required String blobId,
  }) = OutputEvent_DownloadFailed;
  const factory OutputEvent.accUpdated(
    AccView field0,
  ) = OutputEvent_AccUpdated;
  const factory OutputEvent.notification({
    required String id,
  }) = OutputEvent_Notification;
  const factory OutputEvent.notificationsUpdated() =
      OutputEvent_NotificationsUpdated;
  const factory OutputEvent.logOut() = OutputEvent_LogOut;
}

enum PixelFormat {
  /// Blue-Green-Red-Alpha (8bit for each): https://developer.apple.com/documentation/corevideo/kcvpixelformattype_32bgra
  BGRA8888,

  /// Compressed JPEG: https://developer.android.com/reference/android/graphics/ImageFormat#JPEG
  JPEG,
}

class PostAccountPhase {
  final AccView accView;
  PostAccountPhase({
    required this.accView,
  });
}

class ProfileView {
  final String accountId;
  final String name;
  ProfileView({
    required this.accountId,
    required this.name,
  });
}

class SecretGroupStatus {
  final Uint8List authenticationSecret;
  final List<String> devices;
  SecretGroupStatus({
    required this.authenticationSecret,
    required this.devices,
  });
}

class TimelineDay {
  final String day;
  final List<CardView> cards;
  TimelineDay({
    required this.day,
    required this.cards,
  });
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Stream<String> setupLogs({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_setup_logs(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kSetupLogsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetupLogsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setup_logs",
        argNames: [],
      );

  Stream<OutputEvent> setup(
      {required String appSupportDir,
      required String filesDir,
      required String deviceName,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(appSupportDir);
    var arg1 = _platform.api2wire_String(filesDir);
    var arg2 = _platform.api2wire_String(deviceName);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_setup(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_output_event,
      constMeta: kSetupConstMeta,
      argValues: [appSupportDir, filesDir, deviceName],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setup",
        argNames: ["appSupportDir", "filesDir", "deviceName"],
      );

  Future<List<String>> timelineDays(
      {required List<String> labelIds, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(labelIds);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_timeline_days(port_, arg0),
      parseSuccessData: _wire2api_StringList,
      constMeta: kTimelineDaysConstMeta,
      argValues: [labelIds],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTimelineDaysConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "timeline_days",
        argNames: ["labelIds"],
      );

  Future<TimelineDay> timelineByDay(
      {required String day, required List<String> labelIds, dynamic hint}) {
    var arg0 = _platform.api2wire_String(day);
    var arg1 = _platform.api2wire_StringList(labelIds);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_timeline_by_day(port_, arg0, arg1),
      parseSuccessData: _wire2api_timeline_day,
      constMeta: kTimelineByDayConstMeta,
      argValues: [day, labelIds],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTimelineByDayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "timeline_by_day",
        argNames: ["day", "labelIds"],
      );

  Future<String> getDeviceShare({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_device_share(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGetDeviceShareConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDeviceShareConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_device_share",
        argNames: [],
      );

  Future<String> linkDevice({required String share, dynamic hint}) {
    var arg0 = _platform.api2wire_String(share);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_link_device(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kLinkDeviceConstMeta,
      argValues: [share],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLinkDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "link_device",
        argNames: ["share"],
      );

  Future<AccView> removeDevice({required String removeId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(removeId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_remove_device(port_, arg0),
      parseSuccessData: _wire2api_acc_view,
      constMeta: kRemoveDeviceConstMeta,
      argValues: [removeId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_device",
        argNames: ["removeId"],
      );

  Future<void> sync({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync",
        argNames: [],
      );

  Future<AccView> createAccount({String? name, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_account(port_, arg0),
      parseSuccessData: _wire2api_acc_view,
      constMeta: kCreateAccountConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_account",
        argNames: ["name"],
      );

  Future<CardFile> saveFile(
      {required String cardId, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_save_file(port_, arg0, arg1),
      parseSuccessData: _wire2api_card_file,
      constMeta: kSaveFileConstMeta,
      argValues: [cardId, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSaveFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "save_file",
        argNames: ["cardId", "path"],
      );

  Future<CardView> editCard(
      {required String cardId,
      required List<CardChange> changes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    var arg1 = _platform.api2wire_list_card_change(changes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_edit_card(port_, arg0, arg1),
      parseSuccessData: _wire2api_card_view,
      constMeta: kEditCardConstMeta,
      argValues: [cardId, changes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEditCardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "edit_card",
        argNames: ["cardId", "changes"],
      );

  Future<void> closeCard({required String cardId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_card(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCloseCardConstMeta,
      argValues: [cardId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseCardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "close_card",
        argNames: ["cardId"],
      );

  Future<CardView> getCard({required String cardId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_card(port_, arg0),
      parseSuccessData: _wire2api_card_view,
      constMeta: kGetCardConstMeta,
      argValues: [cardId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetCardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_card",
        argNames: ["cardId"],
      );

  Future<CardView> createCard({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_card(port_),
      parseSuccessData: _wire2api_card_view,
      constMeta: kCreateCardConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateCardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_card",
        argNames: [],
      );

  Future<void> moveCardToBin({required String cardId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_move_card_to_bin(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMoveCardToBinConstMeta,
      argValues: [cardId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMoveCardToBinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "move_card_to_bin",
        argNames: ["cardId"],
      );

  Future<CardView> restoreFromBin({required String cardId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_restore_from_bin(port_, arg0),
      parseSuccessData: _wire2api_card_view,
      constMeta: kRestoreFromBinConstMeta,
      argValues: [cardId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRestoreFromBinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "restore_from_bin",
        argNames: ["cardId"],
      );

  Future<void> emptyBin({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_empty_bin(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kEmptyBinConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEmptyBinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "empty_bin",
        argNames: [],
      );

  Future<void> moveCardToBinAll({required String cardId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_move_card_to_bin_all(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMoveCardToBinAllConstMeta,
      argValues: [cardId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMoveCardToBinAllConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "move_card_to_bin_all",
        argNames: ["cardId"],
      );

  Future<CardView> addCardLabel(
      {required String cardId, required String labelId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    var arg1 = _platform.api2wire_String(labelId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_add_card_label(port_, arg0, arg1),
      parseSuccessData: _wire2api_card_view,
      constMeta: kAddCardLabelConstMeta,
      argValues: [cardId, labelId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddCardLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_card_label",
        argNames: ["cardId", "labelId"],
      );

  Future<CardView> removeCardLabel(
      {required String cardId, required String labelId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    var arg1 = _platform.api2wire_String(labelId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_remove_card_label(port_, arg0, arg1),
      parseSuccessData: _wire2api_card_view,
      constMeta: kRemoveCardLabelConstMeta,
      argValues: [cardId, labelId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveCardLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_card_label",
        argNames: ["cardId", "labelId"],
      );

  Future<String?> getFilePath({required String blobId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blobId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_file_path(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kGetFilePathConstMeta,
      argValues: [blobId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetFilePathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_file_path",
        argNames: ["blobId"],
      );

  Future<DownloadResult> downloadFile(
      {required String cardId,
      required String blobId,
      required String deviceId,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    var arg1 = _platform.api2wire_String(blobId);
    var arg2 = _platform.api2wire_String(deviceId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_download_file(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_download_result,
      constMeta: kDownloadFileConstMeta,
      argValues: [cardId, blobId, deviceId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDownloadFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "download_file",
        argNames: ["cardId", "blobId", "deviceId"],
      );

  Future<AccView?> getAccount({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_account(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_acc_view,
      constMeta: kGetAccountConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_account",
        argNames: [],
      );

  Future<SecretGroupStatus> accountGroup({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_account_group(port_),
      parseSuccessData: _wire2api_secret_group_status,
      constMeta: kAccountGroupConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAccountGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "account_group",
        argNames: [],
      );

  Future<AccView> editName({required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_edit_name(port_, arg0),
      parseSuccessData: _wire2api_acc_view,
      constMeta: kEditNameConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEditNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "edit_name",
        argNames: ["name"],
      );

  Future<AccView> addContact({required AccContact contact, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_acc_contact(contact);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_contact(port_, arg0),
      parseSuccessData: _wire2api_acc_view,
      constMeta: kAddContactConstMeta,
      argValues: [contact],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddContactConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "add_contact",
        argNames: ["contact"],
      );

  Future<AccView> editContactName(
      {required String accountId, required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_String(accountId);
    var arg1 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_edit_contact_name(port_, arg0, arg1),
      parseSuccessData: _wire2api_acc_view,
      constMeta: kEditContactNameConstMeta,
      argValues: [accountId, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEditContactNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "edit_contact_name",
        argNames: ["accountId", "name"],
      );

  Future<CreateAccLabelResult> createAccLabel(
      {required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_acc_label(port_, arg0),
      parseSuccessData: _wire2api_create_acc_label_result,
      constMeta: kCreateAccLabelConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAccLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_acc_label",
        argNames: ["name"],
      );

  Future<AccView> deleteAccLabel({required String labelId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(labelId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_delete_acc_label(port_, arg0),
      parseSuccessData: _wire2api_acc_view,
      constMeta: kDeleteAccLabelConstMeta,
      argValues: [labelId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteAccLabelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete_acc_label",
        argNames: ["labelId"],
      );

  Future<CardView> editCollaborators(
      {required String cardId,
      required List<CollaboratorChange> changes,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(cardId);
    var arg1 = _platform.api2wire_list_collaborator_change(changes);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_edit_collaborators(port_, arg0, arg1),
      parseSuccessData: _wire2api_card_view,
      constMeta: kEditCollaboratorsConstMeta,
      argValues: [cardId, changes],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEditCollaboratorsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "edit_collaborators",
        argNames: ["cardId", "changes"],
      );

  Future<void> exportData({required String outDir, dynamic hint}) {
    var arg0 = _platform.api2wire_String(outDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_export_data(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kExportDataConstMeta,
      argValues: [outDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExportDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "export_data",
        argNames: ["outDir"],
      );

  Future<ImportResult> importData({required String inDir, dynamic hint}) {
    var arg0 = _platform.api2wire_String(inDir);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_import_data(port_, arg0),
      parseSuccessData: _wire2api_import_result,
      constMeta: kImportDataConstMeta,
      argValues: [inDir],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kImportDataConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "import_data",
        argNames: ["inDir"],
      );

  String getCurrentDeviceId({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_current_device_id(),
      parseSuccessData: _wire2api_String,
      constMeta: kGetCurrentDeviceIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetCurrentDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_current_device_id",
        argNames: [],
      );

  String getDeletedLabelId({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_deleted_label_id(),
      parseSuccessData: _wire2api_String,
      constMeta: kGetDeletedLabelIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDeletedLabelIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_deleted_label_id",
        argNames: [],
      );

  Future<String?> scanQrCode(
      {required int width,
      required int height,
      required PixelFormat format,
      required Uint8List buf,
      dynamic hint}) {
    var arg0 = api2wire_u32(width);
    var arg1 = api2wire_u32(height);
    var arg2 = api2wire_pixel_format(format);
    var arg3 = _platform.api2wire_uint_8_list(buf);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_scan_qr_code(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kScanQrCodeConstMeta,
      argValues: [width, height, format, buf],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScanQrCodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "scan_qr_code",
        argNames: ["width", "height", "format", "buf"],
      );

  Future<List<ProfileView>> listProfiles({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_profiles(port_),
      parseSuccessData: _wire2api_list_profile_view,
      constMeta: kListProfilesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListProfilesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_profiles",
        argNames: [],
      );

  Future<void> acceptNotification({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_accept_notification(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kAcceptNotificationConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAcceptNotificationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "accept_notification",
        argNames: ["id"],
      );

  Future<void> ignoreNotification({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_ignore_notification(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kIgnoreNotificationConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIgnoreNotificationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "ignore_notification",
        argNames: ["id"],
      );

  Future<List<String>> listNotificationIds({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_notification_ids(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kListNotificationIdsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListNotificationIdsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_notification_ids",
        argNames: [],
      );

  Future<void> logout({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_logout(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kLogoutConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLogoutConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "logout",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  DateTime _wire2api_Chrono_Utc(dynamic raw) {
    return wire2apiTimestamp(ts: _wire2api_i64(raw), isUtc: true);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  Uint8List _wire2api_ZeroCopyBuffer_Uint8List(dynamic raw) {
    return raw as Uint8List;
  }

  AccContact _wire2api_acc_contact(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccContact(
      accountId: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  AccDevice _wire2api_acc_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AccDevice(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      addedAt: _wire2api_Chrono_Utc(arr[2]),
    );
  }

  AccLabel _wire2api_acc_label(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccLabel(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  AccView _wire2api_acc_view(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AccView(
      id: _wire2api_String(arr[0]),
      createdAtSec: _wire2api_i64(arr[1]),
      name: _wire2api_String(arr[2]),
      contacts: _wire2api_list_acc_contact(arr[3]),
      labels: _wire2api_list_acc_label(arr[4]),
      devices: _wire2api_list_acc_device(arr[5]),
    );
  }

  AclDoc _wire2api_acl_doc(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AclDoc(
      accounts: _wire2api_list_acl_entry(arr[0]),
    );
  }

  AclEntry _wire2api_acl_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AclEntry(
      accountId: _wire2api_String(arr[0]),
      rights: _wire2api_acl_rights(arr[1]),
    );
  }

  AclRights _wire2api_acl_rights(dynamic raw) {
    return AclRights.values[raw];
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  AccView _wire2api_box_autoadd_acc_view(dynamic raw) {
    return _wire2api_acc_view(raw);
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  CardFile _wire2api_box_autoadd_card_file(dynamic raw) {
    return _wire2api_card_file(raw);
  }

  CardText _wire2api_box_autoadd_card_text(dynamic raw) {
    return _wire2api_card_text(raw);
  }

  CardTextAttrs _wire2api_box_autoadd_card_text_attrs(dynamic raw) {
    return _wire2api_card_text_attrs(raw);
  }

  DeviceAddedEvent _wire2api_box_autoadd_device_added_event(dynamic raw) {
    return _wire2api_device_added_event(raw);
  }

  DocUpdatedEvent _wire2api_box_autoadd_doc_updated_event(dynamic raw) {
    return _wire2api_doc_updated_event(raw);
  }

  FileThumbnail _wire2api_box_autoadd_file_thumbnail(dynamic raw) {
    return _wire2api_file_thumbnail(raw);
  }

  PostAccountPhase _wire2api_box_autoadd_post_account_phase(dynamic raw) {
    return _wire2api_post_account_phase(raw);
  }

  int _wire2api_box_autoadd_u8(dynamic raw) {
    return raw as int;
  }

  ContentView _wire2api_box_content_view(dynamic raw) {
    return _wire2api_content_view(raw);
  }

  CardBlock _wire2api_card_block(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CardBlock(
      position: _wire2api_u32(arr[0]),
      view: _wire2api_box_content_view(arr[1]),
    );
  }

  CardFile _wire2api_card_file(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return CardFile(
      blobId: _wire2api_String(arr[0]),
      deviceId: _wire2api_String(arr[1]),
      checksum: _wire2api_String(arr[2]),
      sizeBytes: _wire2api_u32(arr[3]),
      name: _wire2api_opt_String(arr[4]),
    );
  }

  CardLabel _wire2api_card_label(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CardLabel(
      id: _wire2api_String(arr[0]),
      addedAt: _wire2api_Chrono_Utc(arr[1]),
    );
  }

  CardText _wire2api_card_text(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CardText(
      value: _wire2api_String(arr[0]),
      attrs: _wire2api_opt_box_autoadd_card_text_attrs(arr[1]),
    );
  }

  CardTextAttrs _wire2api_card_text_attrs(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return CardTextAttrs(
      bold: _wire2api_opt_box_autoadd_bool(arr[0]),
      italic: _wire2api_opt_box_autoadd_bool(arr[1]),
      underline: _wire2api_opt_box_autoadd_bool(arr[2]),
      strikethrough: _wire2api_opt_box_autoadd_bool(arr[3]),
      link: _wire2api_opt_String(arr[4]),
      checked: _wire2api_opt_box_autoadd_bool(arr[5]),
      heading: _wire2api_opt_box_autoadd_u8(arr[6]),
      block: _wire2api_opt_String(arr[7]),
    );
  }

  CardView _wire2api_card_view(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CardView(
      id: _wire2api_String(arr[0]),
      createdAtSec: _wire2api_i64(arr[1]),
      editedAtSec: _wire2api_i64(arr[2]),
      acl: _wire2api_acl_doc(arr[3]),
      blocks: _wire2api_list_card_block(arr[4]),
      labels: _wire2api_list_card_label(arr[5]),
      thumbnail: _wire2api_opt_box_autoadd_file_thumbnail(arr[6]),
    );
  }

  ContentView _wire2api_content_view(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ContentView_Text(
          _wire2api_box_autoadd_card_text(raw[1]),
        );
      case 1:
        return ContentView_File(
          _wire2api_box_autoadd_card_file(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CreateAccLabelResult _wire2api_create_acc_label_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return CreateAccLabelResult(
      view: _wire2api_acc_view(arr[0]),
      label: _wire2api_acc_label(arr[1]),
    );
  }

  DeviceAddedEvent _wire2api_device_added_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DeviceAddedEvent(
      deviceName: _wire2api_String(arr[0]),
    );
  }

  DocUpdatedEvent _wire2api_doc_updated_event(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DocUpdatedEvent(
      docId: _wire2api_String(arr[0]),
    );
  }

  DownloadResult _wire2api_download_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DownloadResult(
      path: _wire2api_opt_String(arr[0]),
      downloadStarted: _wire2api_bool(arr[1]),
    );
  }

  FileThumbnail _wire2api_file_thumbnail(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FileThumbnail(
      mimeType: _wire2api_String(arr[0]),
      width: _wire2api_u32(arr[1]),
      height: _wire2api_u32(arr[2]),
      data: _wire2api_ZeroCopyBuffer_Uint8List(arr[3]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  ImportResult _wire2api_import_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ImportResult(
      imported: _wire2api_u32(arr[0]),
      duplicates: _wire2api_StringList(arr[1]),
      failed: _wire2api_StringList(arr[2]),
    );
  }

  List<AccContact> _wire2api_list_acc_contact(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_acc_contact).toList();
  }

  List<AccDevice> _wire2api_list_acc_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_acc_device).toList();
  }

  List<AccLabel> _wire2api_list_acc_label(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_acc_label).toList();
  }

  List<AclEntry> _wire2api_list_acl_entry(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_acl_entry).toList();
  }

  List<CardBlock> _wire2api_list_card_block(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_card_block).toList();
  }

  List<CardLabel> _wire2api_list_card_label(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_card_label).toList();
  }

  List<CardView> _wire2api_list_card_view(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_card_view).toList();
  }

  List<ProfileView> _wire2api_list_profile_view(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_profile_view).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  AccView? _wire2api_opt_box_autoadd_acc_view(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_acc_view(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  CardTextAttrs? _wire2api_opt_box_autoadd_card_text_attrs(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_card_text_attrs(raw);
  }

  FileThumbnail? _wire2api_opt_box_autoadd_file_thumbnail(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_file_thumbnail(raw);
  }

  int? _wire2api_opt_box_autoadd_u8(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u8(raw);
  }

  OutputEvent _wire2api_output_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return OutputEvent_Synced();
      case 1:
        return OutputEvent_SyncFailed();
      case 2:
        return OutputEvent_TimelineUpdated();
      case 3:
        return OutputEvent_PreAccount();
      case 4:
        return OutputEvent_PostAccount(
          _wire2api_box_autoadd_post_account_phase(raw[1]),
        );
      case 5:
        return OutputEvent_DeviceAdded(
          _wire2api_box_autoadd_device_added_event(raw[1]),
        );
      case 6:
        return OutputEvent_DocUpdated(
          _wire2api_box_autoadd_doc_updated_event(raw[1]),
        );
      case 7:
        return OutputEvent_DownloadCompleted(
          blobId: _wire2api_String(raw[1]),
          path: _wire2api_String(raw[2]),
        );
      case 8:
        return OutputEvent_DownloadFailed(
          blobId: _wire2api_String(raw[1]),
        );
      case 9:
        return OutputEvent_AccUpdated(
          _wire2api_box_autoadd_acc_view(raw[1]),
        );
      case 10:
        return OutputEvent_Notification(
          id: _wire2api_String(raw[1]),
        );
      case 11:
        return OutputEvent_NotificationsUpdated();
      case 12:
        return OutputEvent_LogOut();
      default:
        throw Exception("unreachable");
    }
  }

  PostAccountPhase _wire2api_post_account_phase(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PostAccountPhase(
      accView: _wire2api_acc_view(arr[0]),
    );
  }

  ProfileView _wire2api_profile_view(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ProfileView(
      accountId: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  SecretGroupStatus _wire2api_secret_group_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SecretGroupStatus(
      authenticationSecret: _wire2api_uint_8_list(arr[0]),
      devices: _wire2api_StringList(arr[1]),
    );
  }

  TimelineDay _wire2api_timeline_day(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TimelineDay(
      day: _wire2api_String(arr[0]),
      cards: _wire2api_list_card_view(arr[1]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_acl_rights(AclRights raw) {
  return api2wire_i32(raw.index);
}

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_pixel_format(PixelFormat raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_AccContact> api2wire_box_autoadd_acc_contact(
      AccContact raw) {
    final ptr = inner.new_box_autoadd_acc_contact_0();
    _api_fill_to_wire_acc_contact(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_CardBlock> api2wire_box_autoadd_card_block(CardBlock raw) {
    final ptr = inner.new_box_autoadd_card_block_0();
    _api_fill_to_wire_card_block(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CardFile> api2wire_box_autoadd_card_file(CardFile raw) {
    final ptr = inner.new_box_autoadd_card_file_0();
    _api_fill_to_wire_card_file(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CardText> api2wire_box_autoadd_card_text(CardText raw) {
    final ptr = inner.new_box_autoadd_card_text_0();
    _api_fill_to_wire_card_text(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CardTextAttrs> api2wire_box_autoadd_card_text_attrs(
      CardTextAttrs raw) {
    final ptr = inner.new_box_autoadd_card_text_attrs_0();
    _api_fill_to_wire_card_text_attrs(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_ContentView> api2wire_box_content_view(ContentView raw) {
    final ptr = inner.new_box_content_view_0();
    _api_fill_to_wire_content_view(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_card_change> api2wire_list_card_change(
      List<CardChange> raw) {
    final ans = inner.new_list_card_change_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_card_change(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_collaborator_change> api2wire_list_collaborator_change(
      List<CollaboratorChange> raw) {
    final ans = inner.new_list_collaborator_change_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_collaborator_change(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_CardTextAttrs> api2wire_opt_box_autoadd_card_text_attrs(
      CardTextAttrs? raw) {
    return raw == null
        ? ffi.nullptr
        : api2wire_box_autoadd_card_text_attrs(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_acc_contact(
      AccContact apiObj, wire_AccContact wireObj) {
    wireObj.account_id = api2wire_String(apiObj.accountId);
    wireObj.name = api2wire_String(apiObj.name);
  }

  void _api_fill_to_wire_box_autoadd_acc_contact(
      AccContact apiObj, ffi.Pointer<wire_AccContact> wireObj) {
    _api_fill_to_wire_acc_contact(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_card_block(
      CardBlock apiObj, ffi.Pointer<wire_CardBlock> wireObj) {
    _api_fill_to_wire_card_block(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_card_file(
      CardFile apiObj, ffi.Pointer<wire_CardFile> wireObj) {
    _api_fill_to_wire_card_file(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_card_text(
      CardText apiObj, ffi.Pointer<wire_CardText> wireObj) {
    _api_fill_to_wire_card_text(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_card_text_attrs(
      CardTextAttrs apiObj, ffi.Pointer<wire_CardTextAttrs> wireObj) {
    _api_fill_to_wire_card_text_attrs(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_content_view(
      ContentView apiObj, ffi.Pointer<wire_ContentView> wireObj) {
    _api_fill_to_wire_content_view(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_card_block(CardBlock apiObj, wire_CardBlock wireObj) {
    wireObj.position = api2wire_u32(apiObj.position);
    wireObj.view = api2wire_box_content_view(apiObj.view);
  }

  void _api_fill_to_wire_card_change(
      CardChange apiObj, wire_CardChange wireObj) {
    if (apiObj is CardChange_Insert) {
      var pre_field0 = api2wire_box_autoadd_card_block(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_CardChange_Insert();
      wireObj.kind.ref.Insert.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is CardChange_Remove) {
      var pre_position = api2wire_u32(apiObj.position);
      var pre_len = api2wire_u32(apiObj.len);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_CardChange_Remove();
      wireObj.kind.ref.Remove.ref.position = pre_position;
      wireObj.kind.ref.Remove.ref.len = pre_len;
      return;
    }
    if (apiObj is CardChange_Format) {
      var pre_position = api2wire_u32(apiObj.position);
      var pre_len = api2wire_u32(apiObj.len);
      var pre_attributes =
          api2wire_box_autoadd_card_text_attrs(apiObj.attributes);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_CardChange_Format();
      wireObj.kind.ref.Format.ref.position = pre_position;
      wireObj.kind.ref.Format.ref.len = pre_len;
      wireObj.kind.ref.Format.ref.attributes = pre_attributes;
      return;
    }
  }

  void _api_fill_to_wire_card_file(CardFile apiObj, wire_CardFile wireObj) {
    wireObj.blob_id = api2wire_String(apiObj.blobId);
    wireObj.device_id = api2wire_String(apiObj.deviceId);
    wireObj.checksum = api2wire_String(apiObj.checksum);
    wireObj.size_bytes = api2wire_u32(apiObj.sizeBytes);
    wireObj.name = api2wire_opt_String(apiObj.name);
  }

  void _api_fill_to_wire_card_text(CardText apiObj, wire_CardText wireObj) {
    wireObj.value = api2wire_String(apiObj.value);
    wireObj.attrs = api2wire_opt_box_autoadd_card_text_attrs(apiObj.attrs);
  }

  void _api_fill_to_wire_card_text_attrs(
      CardTextAttrs apiObj, wire_CardTextAttrs wireObj) {
    wireObj.bold = api2wire_opt_box_autoadd_bool(apiObj.bold);
    wireObj.italic = api2wire_opt_box_autoadd_bool(apiObj.italic);
    wireObj.underline = api2wire_opt_box_autoadd_bool(apiObj.underline);
    wireObj.strikethrough = api2wire_opt_box_autoadd_bool(apiObj.strikethrough);
    wireObj.link = api2wire_opt_String(apiObj.link);
    wireObj.checked = api2wire_opt_box_autoadd_bool(apiObj.checked);
    wireObj.heading = api2wire_opt_box_autoadd_u8(apiObj.heading);
    wireObj.block = api2wire_opt_String(apiObj.block);
  }

  void _api_fill_to_wire_collaborator_change(
      CollaboratorChange apiObj, wire_CollaboratorChange wireObj) {
    wireObj.account_id = api2wire_String(apiObj.accountId);
    wireObj.rights = api2wire_acl_rights(apiObj.rights);
    wireObj.removed = api2wire_bool(apiObj.removed);
  }

  void _api_fill_to_wire_content_view(
      ContentView apiObj, wire_ContentView wireObj) {
    if (apiObj is ContentView_Text) {
      var pre_field0 = api2wire_box_autoadd_card_text(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ContentView_Text();
      wireObj.kind.ref.Text.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is ContentView_File) {
      var pre_field0 = api2wire_box_autoadd_card_file(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_ContentView_File();
      wireObj.kind.ref.File.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_opt_box_autoadd_card_text_attrs(
      CardTextAttrs? apiObj, ffi.Pointer<wire_CardTextAttrs> wireObj) {
    if (apiObj != null)
      _api_fill_to_wire_box_autoadd_card_text_attrs(apiObj, wireObj);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_setup_logs(
    int port_,
  ) {
    return _wire_setup_logs(
      port_,
    );
  }

  late final _wire_setup_logsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_setup_logs');
  late final _wire_setup_logs =
      _wire_setup_logsPtr.asFunction<void Function(int)>();

  void wire_setup(
    int port_,
    ffi.Pointer<wire_uint_8_list> app_support_dir,
    ffi.Pointer<wire_uint_8_list> files_dir,
    ffi.Pointer<wire_uint_8_list> device_name,
  ) {
    return _wire_setup(
      port_,
      app_support_dir,
      files_dir,
      device_name,
    );
  }

  late final _wire_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_setup');
  late final _wire_setup = _wire_setupPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_timeline_days(
    int port_,
    ffi.Pointer<wire_StringList> label_ids,
  ) {
    return _wire_timeline_days(
      port_,
      label_ids,
    );
  }

  late final _wire_timeline_daysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_timeline_days');
  late final _wire_timeline_days = _wire_timeline_daysPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  void wire_timeline_by_day(
    int port_,
    ffi.Pointer<wire_uint_8_list> day,
    ffi.Pointer<wire_StringList> label_ids,
  ) {
    return _wire_timeline_by_day(
      port_,
      day,
      label_ids,
    );
  }

  late final _wire_timeline_by_dayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_StringList>)>>('wire_timeline_by_day');
  late final _wire_timeline_by_day = _wire_timeline_by_dayPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_StringList>)>();

  void wire_get_device_share(
    int port_,
  ) {
    return _wire_get_device_share(
      port_,
    );
  }

  late final _wire_get_device_sharePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_device_share');
  late final _wire_get_device_share =
      _wire_get_device_sharePtr.asFunction<void Function(int)>();

  void wire_link_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> share,
  ) {
    return _wire_link_device(
      port_,
      share,
    );
  }

  late final _wire_link_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_link_device');
  late final _wire_link_device = _wire_link_devicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_remove_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> remove_id,
  ) {
    return _wire_remove_device(
      port_,
      remove_id,
    );
  }

  late final _wire_remove_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_remove_device');
  late final _wire_remove_device = _wire_remove_devicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sync(
    int port_,
  ) {
    return _wire_sync(
      port_,
    );
  }

  late final _wire_syncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_sync');
  late final _wire_sync = _wire_syncPtr.asFunction<void Function(int)>();

  void wire_create_account(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_create_account(
      port_,
      name,
    );
  }

  late final _wire_create_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_account');
  late final _wire_create_account = _wire_create_accountPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_save_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_save_file(
      port_,
      card_id,
      path,
    );
  }

  late final _wire_save_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_save_file');
  late final _wire_save_file = _wire_save_filePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_edit_card(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
    ffi.Pointer<wire_list_card_change> changes,
  ) {
    return _wire_edit_card(
      port_,
      card_id,
      changes,
    );
  }

  late final _wire_edit_cardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_card_change>)>>('wire_edit_card');
  late final _wire_edit_card = _wire_edit_cardPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_card_change>)>();

  void wire_close_card(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
  ) {
    return _wire_close_card(
      port_,
      card_id,
    );
  }

  late final _wire_close_cardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_close_card');
  late final _wire_close_card = _wire_close_cardPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_card(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
  ) {
    return _wire_get_card(
      port_,
      card_id,
    );
  }

  late final _wire_get_cardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_card');
  late final _wire_get_card = _wire_get_cardPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_card(
    int port_,
  ) {
    return _wire_create_card(
      port_,
    );
  }

  late final _wire_create_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_card');
  late final _wire_create_card =
      _wire_create_cardPtr.asFunction<void Function(int)>();

  void wire_move_card_to_bin(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
  ) {
    return _wire_move_card_to_bin(
      port_,
      card_id,
    );
  }

  late final _wire_move_card_to_binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_move_card_to_bin');
  late final _wire_move_card_to_bin = _wire_move_card_to_binPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_restore_from_bin(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
  ) {
    return _wire_restore_from_bin(
      port_,
      card_id,
    );
  }

  late final _wire_restore_from_binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_restore_from_bin');
  late final _wire_restore_from_bin = _wire_restore_from_binPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_empty_bin(
    int port_,
  ) {
    return _wire_empty_bin(
      port_,
    );
  }

  late final _wire_empty_binPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_empty_bin');
  late final _wire_empty_bin =
      _wire_empty_binPtr.asFunction<void Function(int)>();

  void wire_move_card_to_bin_all(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
  ) {
    return _wire_move_card_to_bin_all(
      port_,
      card_id,
    );
  }

  late final _wire_move_card_to_bin_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_move_card_to_bin_all');
  late final _wire_move_card_to_bin_all = _wire_move_card_to_bin_allPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_card_label(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
    ffi.Pointer<wire_uint_8_list> label_id,
  ) {
    return _wire_add_card_label(
      port_,
      card_id,
      label_id,
    );
  }

  late final _wire_add_card_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_add_card_label');
  late final _wire_add_card_label = _wire_add_card_labelPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_remove_card_label(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
    ffi.Pointer<wire_uint_8_list> label_id,
  ) {
    return _wire_remove_card_label(
      port_,
      card_id,
      label_id,
    );
  }

  late final _wire_remove_card_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_remove_card_label');
  late final _wire_remove_card_label = _wire_remove_card_labelPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_file_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> blob_id,
  ) {
    return _wire_get_file_path(
      port_,
      blob_id,
    );
  }

  late final _wire_get_file_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_file_path');
  late final _wire_get_file_path = _wire_get_file_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_download_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
    ffi.Pointer<wire_uint_8_list> blob_id,
    ffi.Pointer<wire_uint_8_list> device_id,
  ) {
    return _wire_download_file(
      port_,
      card_id,
      blob_id,
      device_id,
    );
  }

  late final _wire_download_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_download_file');
  late final _wire_download_file = _wire_download_filePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_account(
    int port_,
  ) {
    return _wire_get_account(
      port_,
    );
  }

  late final _wire_get_accountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_account');
  late final _wire_get_account =
      _wire_get_accountPtr.asFunction<void Function(int)>();

  void wire_account_group(
    int port_,
  ) {
    return _wire_account_group(
      port_,
    );
  }

  late final _wire_account_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_account_group');
  late final _wire_account_group =
      _wire_account_groupPtr.asFunction<void Function(int)>();

  void wire_edit_name(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_edit_name(
      port_,
      name,
    );
  }

  late final _wire_edit_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_edit_name');
  late final _wire_edit_name = _wire_edit_namePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_add_contact(
    int port_,
    ffi.Pointer<wire_AccContact> contact,
  ) {
    return _wire_add_contact(
      port_,
      contact,
    );
  }

  late final _wire_add_contactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_AccContact>)>>('wire_add_contact');
  late final _wire_add_contact = _wire_add_contactPtr
      .asFunction<void Function(int, ffi.Pointer<wire_AccContact>)>();

  void wire_edit_contact_name(
    int port_,
    ffi.Pointer<wire_uint_8_list> account_id,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_edit_contact_name(
      port_,
      account_id,
      name,
    );
  }

  late final _wire_edit_contact_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_edit_contact_name');
  late final _wire_edit_contact_name = _wire_edit_contact_namePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_acc_label(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_create_acc_label(
      port_,
      name,
    );
  }

  late final _wire_create_acc_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_acc_label');
  late final _wire_create_acc_label = _wire_create_acc_labelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_delete_acc_label(
    int port_,
    ffi.Pointer<wire_uint_8_list> label_id,
  ) {
    return _wire_delete_acc_label(
      port_,
      label_id,
    );
  }

  late final _wire_delete_acc_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete_acc_label');
  late final _wire_delete_acc_label = _wire_delete_acc_labelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_edit_collaborators(
    int port_,
    ffi.Pointer<wire_uint_8_list> card_id,
    ffi.Pointer<wire_list_collaborator_change> changes,
  ) {
    return _wire_edit_collaborators(
      port_,
      card_id,
      changes,
    );
  }

  late final _wire_edit_collaboratorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_list_collaborator_change>)>>(
      'wire_edit_collaborators');
  late final _wire_edit_collaborators = _wire_edit_collaboratorsPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_collaborator_change>)>();

  void wire_export_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> out_dir,
  ) {
    return _wire_export_data(
      port_,
      out_dir,
    );
  }

  late final _wire_export_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_export_data');
  late final _wire_export_data = _wire_export_dataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_import_data(
    int port_,
    ffi.Pointer<wire_uint_8_list> in_dir,
  ) {
    return _wire_import_data(
      port_,
      in_dir,
    );
  }

  late final _wire_import_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_import_data');
  late final _wire_import_data = _wire_import_dataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_get_current_device_id() {
    return _wire_get_current_device_id();
  }

  late final _wire_get_current_device_idPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_get_current_device_id');
  late final _wire_get_current_device_id =
      _wire_get_current_device_idPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_get_deleted_label_id() {
    return _wire_get_deleted_label_id();
  }

  late final _wire_get_deleted_label_idPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_get_deleted_label_id');
  late final _wire_get_deleted_label_id =
      _wire_get_deleted_label_idPtr.asFunction<WireSyncReturn Function()>();

  void wire_scan_qr_code(
    int port_,
    int width,
    int height,
    int format,
    ffi.Pointer<wire_uint_8_list> buf,
  ) {
    return _wire_scan_qr_code(
      port_,
      width,
      height,
      format,
      buf,
    );
  }

  late final _wire_scan_qr_codePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Uint32, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_scan_qr_code');
  late final _wire_scan_qr_code = _wire_scan_qr_codePtr.asFunction<
      void Function(int, int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_profiles(
    int port_,
  ) {
    return _wire_list_profiles(
      port_,
    );
  }

  late final _wire_list_profilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_profiles');
  late final _wire_list_profiles =
      _wire_list_profilesPtr.asFunction<void Function(int)>();

  void wire_accept_notification(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_accept_notification(
      port_,
      id,
    );
  }

  late final _wire_accept_notificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_accept_notification');
  late final _wire_accept_notification = _wire_accept_notificationPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_ignore_notification(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_ignore_notification(
      port_,
      id,
    );
  }

  late final _wire_ignore_notificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_ignore_notification');
  late final _wire_ignore_notification = _wire_ignore_notificationPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_notification_ids(
    int port_,
  ) {
    return _wire_list_notification_ids(
      port_,
    );
  }

  late final _wire_list_notification_idsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_list_notification_ids');
  late final _wire_list_notification_ids =
      _wire_list_notification_idsPtr.asFunction<void Function(int)>();

  void wire_logout(
    int port_,
  ) {
    return _wire_logout(
      port_,
    );
  }

  late final _wire_logoutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_logout');
  late final _wire_logout = _wire_logoutPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_AccContact> new_box_autoadd_acc_contact_0() {
    return _new_box_autoadd_acc_contact_0();
  }

  late final _new_box_autoadd_acc_contact_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AccContact> Function()>>(
          'new_box_autoadd_acc_contact_0');
  late final _new_box_autoadd_acc_contact_0 = _new_box_autoadd_acc_contact_0Ptr
      .asFunction<ffi.Pointer<wire_AccContact> Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr
      .asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_CardBlock> new_box_autoadd_card_block_0() {
    return _new_box_autoadd_card_block_0();
  }

  late final _new_box_autoadd_card_block_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CardBlock> Function()>>(
          'new_box_autoadd_card_block_0');
  late final _new_box_autoadd_card_block_0 = _new_box_autoadd_card_block_0Ptr
      .asFunction<ffi.Pointer<wire_CardBlock> Function()>();

  ffi.Pointer<wire_CardFile> new_box_autoadd_card_file_0() {
    return _new_box_autoadd_card_file_0();
  }

  late final _new_box_autoadd_card_file_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CardFile> Function()>>(
          'new_box_autoadd_card_file_0');
  late final _new_box_autoadd_card_file_0 = _new_box_autoadd_card_file_0Ptr
      .asFunction<ffi.Pointer<wire_CardFile> Function()>();

  ffi.Pointer<wire_CardText> new_box_autoadd_card_text_0() {
    return _new_box_autoadd_card_text_0();
  }

  late final _new_box_autoadd_card_text_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CardText> Function()>>(
          'new_box_autoadd_card_text_0');
  late final _new_box_autoadd_card_text_0 = _new_box_autoadd_card_text_0Ptr
      .asFunction<ffi.Pointer<wire_CardText> Function()>();

  ffi.Pointer<wire_CardTextAttrs> new_box_autoadd_card_text_attrs_0() {
    return _new_box_autoadd_card_text_attrs_0();
  }

  late final _new_box_autoadd_card_text_attrs_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CardTextAttrs> Function()>>(
          'new_box_autoadd_card_text_attrs_0');
  late final _new_box_autoadd_card_text_attrs_0 =
      _new_box_autoadd_card_text_attrs_0Ptr
          .asFunction<ffi.Pointer<wire_CardTextAttrs> Function()>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_ContentView> new_box_content_view_0() {
    return _new_box_content_view_0();
  }

  late final _new_box_content_view_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ContentView> Function()>>(
          'new_box_content_view_0');
  late final _new_box_content_view_0 = _new_box_content_view_0Ptr
      .asFunction<ffi.Pointer<wire_ContentView> Function()>();

  ffi.Pointer<wire_list_card_change> new_list_card_change_0(
    int len,
  ) {
    return _new_list_card_change_0(
      len,
    );
  }

  late final _new_list_card_change_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_card_change> Function(
              ffi.Int32)>>('new_list_card_change_0');
  late final _new_list_card_change_0 = _new_list_card_change_0Ptr
      .asFunction<ffi.Pointer<wire_list_card_change> Function(int)>();

  ffi.Pointer<wire_list_collaborator_change> new_list_collaborator_change_0(
    int len,
  ) {
    return _new_list_collaborator_change_0(
      len,
    );
  }

  late final _new_list_collaborator_change_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_collaborator_change> Function(
              ffi.Int32)>>('new_list_collaborator_change_0');
  late final _new_list_collaborator_change_0 =
      _new_list_collaborator_change_0Ptr.asFunction<
          ffi.Pointer<wire_list_collaborator_change> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<CardChangeKind> inflate_CardChange_Insert() {
    return _inflate_CardChange_Insert();
  }

  late final _inflate_CardChange_InsertPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CardChangeKind> Function()>>(
          'inflate_CardChange_Insert');
  late final _inflate_CardChange_Insert = _inflate_CardChange_InsertPtr
      .asFunction<ffi.Pointer<CardChangeKind> Function()>();

  ffi.Pointer<CardChangeKind> inflate_CardChange_Remove() {
    return _inflate_CardChange_Remove();
  }

  late final _inflate_CardChange_RemovePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CardChangeKind> Function()>>(
          'inflate_CardChange_Remove');
  late final _inflate_CardChange_Remove = _inflate_CardChange_RemovePtr
      .asFunction<ffi.Pointer<CardChangeKind> Function()>();

  ffi.Pointer<CardChangeKind> inflate_CardChange_Format() {
    return _inflate_CardChange_Format();
  }

  late final _inflate_CardChange_FormatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CardChangeKind> Function()>>(
          'inflate_CardChange_Format');
  late final _inflate_CardChange_Format = _inflate_CardChange_FormatPtr
      .asFunction<ffi.Pointer<CardChangeKind> Function()>();

  ffi.Pointer<ContentViewKind> inflate_ContentView_Text() {
    return _inflate_ContentView_Text();
  }

  late final _inflate_ContentView_TextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ContentViewKind> Function()>>(
          'inflate_ContentView_Text');
  late final _inflate_ContentView_Text = _inflate_ContentView_TextPtr
      .asFunction<ffi.Pointer<ContentViewKind> Function()>();

  ffi.Pointer<ContentViewKind> inflate_ContentView_File() {
    return _inflate_ContentView_File();
  }

  late final _inflate_ContentView_FilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ContentViewKind> Function()>>(
          'inflate_ContentView_File');
  late final _inflate_ContentView_File = _inflate_ContentView_FilePtr
      .asFunction<ffi.Pointer<ContentViewKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

class wire_CardTextAttrs extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> bold;

  external ffi.Pointer<ffi.Bool> italic;

  external ffi.Pointer<ffi.Bool> underline;

  external ffi.Pointer<ffi.Bool> strikethrough;

  external ffi.Pointer<wire_uint_8_list> link;

  external ffi.Pointer<ffi.Bool> checked;

  external ffi.Pointer<ffi.Uint8> heading;

  external ffi.Pointer<wire_uint_8_list> block;
}

class wire_CardText extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> value;

  external ffi.Pointer<wire_CardTextAttrs> attrs;
}

class wire_ContentView_Text extends ffi.Struct {
  external ffi.Pointer<wire_CardText> field0;
}

class wire_CardFile extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> blob_id;

  external ffi.Pointer<wire_uint_8_list> device_id;

  external ffi.Pointer<wire_uint_8_list> checksum;

  @ffi.Uint32()
  external int size_bytes;

  external ffi.Pointer<wire_uint_8_list> name;
}

class wire_ContentView_File extends ffi.Struct {
  external ffi.Pointer<wire_CardFile> field0;
}

class ContentViewKind extends ffi.Union {
  external ffi.Pointer<wire_ContentView_Text> Text;

  external ffi.Pointer<wire_ContentView_File> File;
}

class wire_ContentView extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ContentViewKind> kind;
}

class wire_CardBlock extends ffi.Struct {
  @ffi.Uint32()
  external int position;

  external ffi.Pointer<wire_ContentView> view;
}

class wire_CardChange_Insert extends ffi.Struct {
  external ffi.Pointer<wire_CardBlock> field0;
}

class wire_CardChange_Remove extends ffi.Struct {
  @ffi.Uint32()
  external int position;

  @ffi.Uint32()
  external int len;
}

class wire_CardChange_Format extends ffi.Struct {
  @ffi.Uint32()
  external int position;

  @ffi.Uint32()
  external int len;

  external ffi.Pointer<wire_CardTextAttrs> attributes;
}

class CardChangeKind extends ffi.Union {
  external ffi.Pointer<wire_CardChange_Insert> Insert;

  external ffi.Pointer<wire_CardChange_Remove> Remove;

  external ffi.Pointer<wire_CardChange_Format> Format;
}

class wire_CardChange extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<CardChangeKind> kind;
}

class wire_list_card_change extends ffi.Struct {
  external ffi.Pointer<wire_CardChange> ptr;

  @ffi.Int32()
  external int len;
}

class wire_AccContact extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> account_id;

  external ffi.Pointer<wire_uint_8_list> name;
}

class wire_CollaboratorChange extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> account_id;

  @ffi.Int32()
  external int rights;

  @ffi.Bool()
  external bool removed;
}

class wire_list_collaborator_change extends ffi.Struct {
  external ffi.Pointer<wire_CollaboratorChange> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
